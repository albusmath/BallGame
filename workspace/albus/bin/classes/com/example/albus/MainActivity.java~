package com.example.albus;

import java.util.*;

import android.graphics.*;
import android.hardware.*;
import android.os.*;
import android.annotation.*;
import android.app.*;
import android.content.*;
import android.content.pm.*;
import android.util.*;
import android.view.*;

public class MainActivity extends Activity implements SensorEventListener {
	private Ball ball;
	private Sensor mAccelerometer;
	private SensorManager mSensorManager;
	private Vector<Vector_2d> wallA, wallB;
	
	protected void insertWall(Vector_2d la, Vector_2d lb) {
		wallA.add(la);
		wallB.add(lb);
	}
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		mSensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
		
		mAccelerometer = (Sensor) mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
		
		setRequestedOrientation (ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);     //  Fixed Portrait orientation
		
		ball = (Ball) findViewById(R.id.ball1);

		wallA = new Vector<Vector_2d>();
		wallB = new Vector<Vector_2d>();

		int W = ball.getRight() - ball.getLeft();
		int H = ball.getTop() - ball.getBottom();

		insertWall(new Vector_2d(0, 0), new Vector_2d(W, 0));
		insertWall(new Vector_2d(W, 0), new Vector_2d(W, H));
		insertWall(new Vector_2d(W, H), new Vector_2d(0, H));
		insertWall(new Vector_2d(0, H), new Vector_2d(0, H));
	}

	@Override
	protected void onResume() {
        super.onResume();
        mSensorManager.registerListener(this, mAccelerometer, SensorManager.SENSOR_DELAY_UI);
    }
	
	@Override
    protected void onPause() {
        super.onPause();
        mSensorManager.unregisterListener(this);
    }

	@Override
	public void onSensorChanged(SensorEvent event) {
		if (event.sensor.getType() != Sensor.TYPE_ACCELEROMETER) {
			return ;
		}
		ball.acceleration = new Vector_3d(-event.values[0], event.values[1], event.values[2]);
		findViewById(android.R.id.content).invalidate();
	}
	
	@Override
	public void onAccuracyChanged(Sensor arg0, int arg1) {
	}

	class Ball extends View {
		private double r, x, y;
		public Vector_3d acceleration, velocity;
		private long lastTime = 0;
		
		public Ball(Context context, AttributeSet attrs) {
			super(context, attrs);
			r = 40;
			x = 0;
			y = 0;
			
			acceleration = new Vector_3d();
			velocity = new Vector_3d();
		}
		
		public double getR() {
			return r;
		}

		@SuppressLint("Override")
		public double getX() {
			return x;
		}
		
		@SuppressLint("Override")
		public double getY() {
			return y;
		}

		@SuppressLint("Override")
		public void setX(double d) {
			x = d;
		}
		
		@SuppressLint("Override")	
		public void setY(double y0) {
			y = y0;
		}
		
		@SuppressLint("Override")
		public void setR(double r0) {
			r = r0;
		}
		
		boolean isIntersected(	Vector_2d A, Vector_2d B,
					Vector_2d X, Vector_2d Y) {
			return true ;
		}
		
		void reflect(	double x, double y, 
				double nextX, double nextY) {
			Vector_2d now = new Vector_2d(x, y);
			Vector_2d next = new Vector_2d(nextX, nextY);

			for (int i = 0;i < wallA.size();i++) {
				if (Geometry.intersect_ex(now, next, wallA.get(i), wallB.get(i))) {
					velocity = Geometry.reflect(velocity, wallA.get(i).subtract(wallB.get(i)));
					return ;
				}
			}
		}
		
		@SuppressLint("DrawAllocation")
		protected void onDraw(Canvas canvas) {
			System.out.println("redraw!!");
			long currTime = System.nanoTime();
			if (lastTime > 0) {
				double dt = (currTime - lastTime) / 1000000000.0;
				velocity = velocity.add(acceleration.multiply(dt));
				double nx = x + velocity.x * dt;
				double ny = y + velocity.y * dt;

				reflect(x, yn, nx, ny);
				x += velocity.x * dt;
				y += velocity.y * dt;

				Paint paint = new Paint();
				paint.setColor(Color.GREEN);
				canvas.drawCircle((float)x, (float)y, (float)r, paint);
			}
			lastTime = currTime;
			invalidate();
			System.out.println(getLeft() + " " + getRight() + " " + getTop() + " " + getBottom());
		}
	}
}
